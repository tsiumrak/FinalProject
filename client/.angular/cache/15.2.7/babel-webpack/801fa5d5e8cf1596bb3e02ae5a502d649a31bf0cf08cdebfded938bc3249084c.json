{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.URL = \"http://localhost:8080/api\";\n    this.token = null;\n  }\n  login(email, password) {\n    return this.http.post(`${this.URL}/users/login`, {\n      email,\n      password\n    }).pipe(map(response => {\n      if (response && response.token) {\n        this.token = response.token;\n        localStorage.setItem(\"token\", response.token);\n        this.router.navigate([\"/profile\"]);\n        return response;\n      }\n      return {};\n    }), catchError(error => {\n      const message = error.error.errorMessage;\n      return throwError(() => new Error(message));\n    }));\n  }\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n  getAll() {\n    return this.http.get(this.URL).pipe(catchError(this.handleError));\n  }\n  getById(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  create(user) {\n    return this.http.post(this.URL, user).pipe();\n    try {} catch {}\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAOC,UAAU,QAAY,MAAM;AAGlE,SAASC,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAFpD,QAAG,GAAG,2BAA2B;IAGzB,UAAK,GAAkB,IAAI;EAD4B;EAG/DC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CAAM,GAAG,IAAI,CAACC,GAAG,cAAc,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACzDG,IAAI,CACHV,GAAG,CAAEW,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACA,KAAK,GAAGD,QAAQ,CAACC,KAAK;QAC3BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7C,IAAI,CAACR,MAAM,CAACW,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QAClC,OAAOJ,QAAQ;;MAEjB,OAAO,EAAE;IACX,CAAC,CAAC,EACFb,UAAU,CAAEkB,KAAwB,IAAI;MACtC,MAAMC,OAAO,GAAGD,KAAK,CAACA,KAAK,CAACE,YAAY;MACxC,OAAOnB,UAAU,CAAC,MAAM,IAAIoB,KAAK,CAACF,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CACH;EACL;EAEAG,MAAM;IACJ,IAAI,CAACR,KAAK,GAAG,IAAI;IACjBC,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,MAAM;IACJ,OAAO,IAAI,CAACnB,IAAI,CACboB,GAAG,CAAc,IAAI,CAACd,GAAG,CAAC,CAC1BC,IAAI,CAACZ,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,CAAC;EACvC;EAEAC,OAAO,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAAClB,GAAG,IAAIiB,EAAE,EAAE;IAC/B,OAAO,IAAI,CAACvB,IAAI,CAACoB,GAAG,CAAYI,GAAG,CAAC,CAACjB,IAAI,CAACZ,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,CAAC;EACzE;EAEAI,MAAM,CAACC,IAAe;IACpB,OAAO,IAAI,CAAC1B,IAAI,CACbK,IAAI,CAAY,IAAI,CAACC,GAAG,EAAEoB,IAAI,CAAC,CAC/BnB,IAAI,EAAC;IAAA,aACZ;EAAA;;AA9CaT,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA6B,SAAZ7B,YAAY;EAAA8B,YAFX;AAAM","names":["catchError","throwError","map","UsersService","constructor","http","router","login","email","password","post","URL","pipe","response","token","localStorage","setItem","navigate","error","message","errorMessage","Error","logout","removeItem","getAll","get","handleError","getById","id","url","create","user","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, catchError, tap, throwError, of } from \"rxjs\";\nimport { UserModel } from \"../models/user.model\";\nimport { Router } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  URL = \"http://localhost:8080/api\";\n\n  constructor(private http: HttpClient, private router: Router) {}\n  private token: string | null = null;\n\n  login(email: string, password: string): Observable<any> {\n    return this.http\n      .post<any>(`${this.URL}/users/login`, { email, password })\n      .pipe(\n        map((response) => {\n          if (response && response.token) {\n            this.token = response.token;\n            localStorage.setItem(\"token\", response.token);\n            this.router.navigate([\"/profile\"]);\n            return response;\n          }\n          return {};\n        }),\n        catchError((error: HttpErrorResponse) => {\n          const message = error.error.errorMessage;\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n\n  getAll(): Observable<UserModel[]> {\n    return this.http\n      .get<UserModel[]>(this.URL)\n      .pipe(catchError(this.handleError));\n  }\n\n  getById(id: string): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http.get<UserModel>(url).pipe(catchError(this.handleError));\n  }\n\n  create(user: UserModel): Observable<UserModel> {\n    return this.http\n      .post<UserModel>(this.URL, user)\n      .pipe(catch\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}