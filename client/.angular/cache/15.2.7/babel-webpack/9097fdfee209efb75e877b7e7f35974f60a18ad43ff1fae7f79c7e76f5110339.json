{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.URL = \"http://localhost:8080/api\";\n  }\n  //   login(user: UserModel): Observable<any> {\n  //     return this.http\n  //       .post(`${this.URL}/login`, user)\n  //       .pipe(\n  //         tap(this.setToken),\n  //         catchError(this.handleError)\n  //       ) as Observable<any>;\n  //   }\n  //   setToken(response: any) {\n  //     if (response) {\n  //       const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n  //       localStorage.setItem(\"token\", response.token);\n  //       localStorage.setItem(\"token-exp\", expiresDate.toString());\n  //     } else {\n  //       localStorage.clear();\n  //     }\n  //   }\n  //   login(user: UserModel): Observable<any> {\n  //     return this.http\n  //       .post(`${this.URL}/login`, { email: user.email, password: user.password })\n  //       .pipe(\n  //         tap((response) => {\n  //           if (response && response.token) {\n  //             this.setToken(response.token);\n  //           }\n  //         }),\n  //         catchError(this.handleError)\n  //       ) as Observable<any>;\n  //   }\n  //   setToken(token: string) {\n  //     const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n  //     localStorage.setItem(\"token\", token);\n  //     localStorage.setItem(\"token-exp\", expiresDate.toString());\n  //   }\n  login(user) {\n    return this.http.post(`${this.URL}/login`, {\n      email: user.email,\n      password: user.password\n    }).pipe(tap(response => {\n      if (response && response.token) {\n        this.setToken(response.token);\n        this.router.navigate([\"/profile\"]); // перенаправлення на сторінку profile\n      }\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n  logout() {\n    this.setToken(null);\n  }\n  getAll() {\n    return this.http.get(this.URL).pipe(catchError(this.handleError));\n  }\n  getById(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  create(user) {\n    return this.http.post(this.URL, user).pipe(catchError(this.handleError));\n  }\n  update(id, user) {\n    const url = `${this.URL}/${id}`;\n    return this.http.put(url, user).pipe(catchError(this.handleError));\n  }\n  delete(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete(url).pipe(catchError(this.handleError));\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  get token() {\n    const expStr = localStorage.getItem(\"token-exp\");\n    if (expStr) {\n      const date = new Date(expStr);\n      if (date < new Date()) {\n        this.logout();\n        return null;\n      } else {\n        return localStorage.getItem(\"token\");\n      }\n    }\n    return null;\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["catchError","tap","throwError","UsersService","constructor","http","router","login","user","post","URL","email","password","pipe","response","token","setToken","navigate","handleError","error","message","errorMessage","Error","logout","getAll","get","getById","id","url","create","update","put","delete","isAuthenticated","expStr","localStorage","getItem","date","Date","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, catchError, tap, throwError } from \"rxjs\";\nimport { UserModel } from \"../models/user.model\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  URL = \"http://localhost:8080/api\";\n\n  constructor(private http: HttpClient, router: Router) {}\n\n  //   login(user: UserModel): Observable<any> {\n  //     return this.http\n  //       .post(`${this.URL}/login`, user)\n  //       .pipe(\n  //         tap(this.setToken),\n  //         catchError(this.handleError)\n  //       ) as Observable<any>;\n  //   }\n\n  //   setToken(response: any) {\n  //     if (response) {\n  //       const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n  //       localStorage.setItem(\"token\", response.token);\n  //       localStorage.setItem(\"token-exp\", expiresDate.toString());\n  //     } else {\n  //       localStorage.clear();\n  //     }\n  //   }\n\n  //   login(user: UserModel): Observable<any> {\n  //     return this.http\n  //       .post(`${this.URL}/login`, { email: user.email, password: user.password })\n  //       .pipe(\n  //         tap((response) => {\n  //           if (response && response.token) {\n  //             this.setToken(response.token);\n  //           }\n  //         }),\n  //         catchError(this.handleError)\n  //       ) as Observable<any>;\n  //   }\n\n  //   setToken(token: string) {\n  //     const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n  //     localStorage.setItem(\"token\", token);\n  //     localStorage.setItem(\"token-exp\", expiresDate.toString());\n  //   }\n  login(user: UserModel): Observable<any> {\n    return this.http\n      .post(`${this.URL}/login`, { email: user.email, password: user.password })\n      .pipe(\n        tap((response) => {\n          if (response && response.token) {\n            this.setToken(response.token);\n            this.router.navigate([\"/profile\"]); // перенаправлення на сторінку profile\n          }\n        }),\n        catchError(this.handleError)\n      ) as Observable<any>;\n  }\n\n  handleError(error: HttpErrorResponse) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n\n  logout() {\n    this.setToken(null);\n  }\n\n  getAll(): Observable<UserModel[]> {\n    return this.http\n      .get<UserModel[]>(this.URL)\n      .pipe(catchError(this.handleError));\n  }\n\n  getById(id: string): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http.get<UserModel>(url).pipe(catchError(this.handleError));\n  }\n\n  create(user: UserModel): Observable<UserModel> {\n    return this.http\n      .post<UserModel>(this.URL, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  update(id: string, user: UserModel): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http\n      .put<UserModel>(url, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  delete(id: string): Observable<void> {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete<void>(url).pipe(catchError(this.handleError));\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n\n  get token(): string | null {\n    const expStr = localStorage.getItem(\"token-exp\");\n\n    if (expStr) {\n      const date = new Date(expStr);\n\n      if (date < new Date()) {\n        this.logout();\n        return null;\n      } else {\n        return localStorage.getItem(\"token\");\n      }\n    }\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}