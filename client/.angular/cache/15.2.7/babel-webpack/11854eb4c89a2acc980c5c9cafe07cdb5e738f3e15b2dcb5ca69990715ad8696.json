{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = \"http://localhost:8080/api\";\n    this.token = null;\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/users/login`, {\n      email,\n      password\n    }).pipe(map(response => {\n      if (response && response.token) {\n        this.token = response.token;\n        localStorage.setItem(\"token\", response.token);\n        this.router.navigate([\"/admin-page/profile\"]);\n      }\n      return response;\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    const message = error.error.errorMessage;\n    return throwError(message);\n  }\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n  // getAll(): Observable<UserModel[]> {\n  //   return this.http\n  //     .get<UserModel[]>(this.apiUrl)\n  //     .pipe(catchError(this.handleError));\n  // }\n  // getById(id: string): Observable<UserModel> {\n  //   const url = `${this.apiUrl}/${id}`;\n  //   return this.http.get<UserModel>(url).pipe(catchError(this.handleError));\n  // }\n  create(user) {\n    return this.http.post(`${this.apiUrl}/login`, user).pipe(catchError(this.handleError));\n  }\n  // update(id: string, user: UserModel): Observable<UserModel> {\n  //   const url = `${this.apiUrl}/${id}`;\n  //   return this.http\n  //     .put<UserModel>(url, user)\n  //     .pipe(catchError(this.handleError));\n  // }\n  // delete(id: string): Observable<void> {\n  //   const url = `${this.apiUrl}/${id}`;\n  //   return this.http.delete<void>(url).pipe(catchError(this.handleError));\n  // }\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAOhD,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAH5C,WAAM,GAAG,2BAA2B;IACpC,UAAK,GAAkB,IAAI;EAE4B;EAE/DC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,cAAc,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAC5DG,IAAI,CACHV,GAAG,CAAEW,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACA,KAAK,GAAGD,QAAQ,CAACC,KAAK;QAC3BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7C,IAAI,CAACR,MAAM,CAACW,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;;MAE/C,OAAOJ,QAAQ;IACjB,CAAC,CAAC,EACFZ,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACC,KAAwB;IAC1C,MAAMC,OAAO,GAAGD,KAAK,CAACA,KAAK,CAACE,YAAY;IACxC,OAAOrB,UAAU,CAACoB,OAAO,CAAC;EAC5B;EAEAE,MAAM;IACJ,IAAI,CAACR,KAAK,GAAG,IAAI;IACjBC,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAClC;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAC,MAAM,CAACC,IAAe;IACpB,OAAO,IAAI,CAACpB,IAAI,CACbK,IAAI,CAAY,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEc,IAAI,CAAC,CAC7Cb,IAAI,CAACX,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACvC;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAQ,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACZ,KAAK;EACrB;;AA/DWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAwB,SAAZxB,YAAY;EAAAyB,YAFX;AAAM","names":["throwError","catchError","map","UsersService","constructor","http","router","login","email","password","post","apiUrl","pipe","response","token","localStorage","setItem","navigate","handleError","error","message","errorMessage","logout","removeItem","create","user","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { UserModel } from \"../models/user.model\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  private apiUrl = \"http://localhost:8080/api\";\n  private token: string | null = null;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(email: string, password: string): Observable<any> {\n    return this.http\n      .post<any>(`${this.apiUrl}/users/login`, { email, password })\n      .pipe(\n        map((response) => {\n          if (response && response.token) {\n            this.token = response.token;\n            localStorage.setItem(\"token\", response.token);\n            this.router.navigate([\"/admin-page/profile\"]);\n          }\n          return response;\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    const message = error.error.errorMessage;\n    return throwError(message);\n  }\n\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n\n  // getAll(): Observable<UserModel[]> {\n  //   return this.http\n  //     .get<UserModel[]>(this.apiUrl)\n  //     .pipe(catchError(this.handleError));\n  // }\n\n  // getById(id: string): Observable<UserModel> {\n  //   const url = `${this.apiUrl}/${id}`;\n  //   return this.http.get<UserModel>(url).pipe(catchError(this.handleError));\n  // }\n\n  create(user: UserModel): Observable<UserModel> {\n    return this.http\n      .post<UserModel>(`${this.apiUrl}/login`, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  // update(id: string, user: UserModel): Observable<UserModel> {\n  //   const url = `${this.apiUrl}/${id}`;\n  //   return this.http\n  //     .put<UserModel>(url, user)\n  //     .pipe(catchError(this.handleError));\n  // }\n\n  // delete(id: string): Observable<void> {\n  //   const url = `${this.apiUrl}/${id}`;\n  //   return this.http.delete<void>(url).pipe(catchError(this.handleError));\n  // }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}