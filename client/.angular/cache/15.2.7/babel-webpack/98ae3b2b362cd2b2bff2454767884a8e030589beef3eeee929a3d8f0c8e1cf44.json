{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/translations.service\";\nimport * as i2 from \"@angular/forms\";\nexport class LanguageSelectorComponent {\n  constructor(translationService) {\n    this.translationService = translationService;\n    this.languages = [{\n      code: \"en\",\n      label: \"English\"\n    }, {\n      code: \"uk\",\n      label: \"Українська\"\n    }];\n  }\n  // changeLanguage(event: Event): void {\n  //   const value = (event.target as HTMLSelectElement)?.value;\n  //   if (value) {\n  //     this.translationService.loadTranslations(value).then(() => {\n  //       document.documentElement.lang = value;\n  //     });\n  //   }\n  // }\n  changeLanguage(event) {\n    const value = event.target?.value;\n    if (value) {\n      this.translationService.loadTranslations(value).then(() => {\n        document.documentElement.lang = value;\n      });\n    }\n  }\n}\nLanguageSelectorComponent.ɵfac = function LanguageSelectorComponent_Factory(t) {\n  return new (t || LanguageSelectorComponent)(i0.ɵɵdirectiveInject(i1.TranslationService));\n};\nLanguageSelectorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LanguageSelectorComponent,\n  selectors: [[\"app-language-selector\"]],\n  decls: 5,\n  vars: 0,\n  consts: [[3, \"change\"], [\"value\", \"en\"], [\"value\", \"uk\"]],\n  template: function LanguageSelectorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"select\", 0);\n      i0.ɵɵlistener(\"change\", function LanguageSelectorComponent_Template_select_change_0_listener($event) {\n        return ctx.changeLanguage($event.target.value);\n      });\n      i0.ɵɵelementStart(1, \"option\", 1);\n      i0.ɵɵtext(2, \"English\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"option\", 2);\n      i0.ɵɵtext(4, \"\\u0423\\u043A\\u0440\\u0430\\u0457\\u043D\\u0441\\u044C\\u043A\\u0430\");\n      i0.ɵɵelementEnd()();\n    }\n  },\n  dependencies: [i2.NgSelectOption, i2.ɵNgSelectMultipleOption],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;AA+BA,OAAM,MAAOA,yBAAyB;EAMpCC,YAAoBC,kBAAsC;IAAtC,uBAAkB,GAAlBA,kBAAkB;IALtC,cAAS,GAAG,CACV;MAAEC,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAS,CAAE,EAChC;MAAED,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAY,CAAE,CACpC;EAE4D;EAE7D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,cAAc,CAACC,KAAY;IACzB,MAAMC,KAAK,GAAID,KAAK,CAACE,MAA4B,EAAED,KAAK;IACxD,IAAIA,KAAK,EAAE;MACT,IAAI,CAACL,kBAAkB,CAACO,gBAAgB,CAACF,KAAK,CAAC,CAACG,IAAI,CAAC,MAAK;QACxDC,QAAQ,CAACC,eAAe,CAACC,IAAI,GAAGN,KAAK;MACvC,CAAC,CAAC;;EAEN;;AAvBWP,yBAAyB;mBAAzBA,yBAAyB;AAAA;AAAzBA,yBAAyB;QAAzBA,yBAAyB;EAAAc;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MC/BtCC,iCAAuD;MAA/CA;QAAA,OAAUC,uCAAmC;MAAA,EAAC;MACpDD,iCAAmB;MAAAA,uBAAO;MAAAA,iBAAS;MACnCA,iCAAmB;MAAAA,4EAAU;MAAAA,iBAAS","names":["LanguageSelectorComponent","constructor","translationService","code","label","changeLanguage","event","value","target","loadTranslations","then","document","documentElement","lang","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/components/language-selector/language-selector.component.ts","/Users/igortsiumrak/Desktop/FinalProject/client/src/app/components/language-selector/language-selector.component.html"],"sourcesContent":["// import { Component } from \"@angular/core\";\n// import { TranslationService } from \"src/app/services/translations.service\";\n\n// @Component({\n//   selector: \"app-language-selector\",\n//   templateUrl: \"./language-selector.component.html\",\n//   styleUrls: [\"./language-selector.component.css\"],\n// })\n// export class LanguageSelectorComponent {\n//   languages = [\n//     { code: \"en\", label: \"English\" },\n//     { code: \"uk\", label: \"Українська\" },\n//   ];\n\n//   constructor(private translationService: TranslationService) {}\n\n//   changeLanguage(languageCode: string): void {\n//     this.translationService.loadTranslations(languageCode).then(() => {\n//       document.documentElement.lang = languageCode;\n//     });\n//   }\n// }\n\nimport { Component } from \"@angular/core\";\nimport { TranslationService } from \"src/app/services/translations.service\";\n\n@Component({\n  selector: \"app-language-selector\",\n  templateUrl: \"./language-selector.component.html\",\n  styleUrls: [\"./language-selector.component.css\"],\n})\nexport class LanguageSelectorComponent {\n  languages = [\n    { code: \"en\", label: \"English\" },\n    { code: \"uk\", label: \"Українська\" },\n  ];\n\n  constructor(private translationService: TranslationService) {}\n\n  // changeLanguage(event: Event): void {\n  //   const value = (event.target as HTMLSelectElement)?.value;\n  //   if (value) {\n  //     this.translationService.loadTranslations(value).then(() => {\n  //       document.documentElement.lang = value;\n  //     });\n  //   }\n  // }\n  changeLanguage(event: Event): void {\n    const value = (event.target as HTMLSelectElement)?.value;\n    if (value) {\n      this.translationService.loadTranslations(value).then(() => {\n        document.documentElement.lang = value;\n      });\n    }\n  }\n}\n","<select (change)=\"changeLanguage($event.target.value)\">\n  <option value=\"en\">English</option>\n  <option value=\"uk\">Українська</option>\n</select>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}