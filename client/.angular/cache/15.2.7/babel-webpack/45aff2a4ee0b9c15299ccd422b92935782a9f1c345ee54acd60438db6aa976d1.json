{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.URL = \"http://localhost:8080/api\";\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/users/login`, {\n      email,\n      password\n    }).pipe(map(response => {\n      if (response && response.token) {\n        this.token = response.token;\n        localStorage.setItem(\"token\", response.token);\n        this.router.navigate([\"/profile\"]);\n      }\n      return response;\n    }));\n  }\n  handleError(error) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n  getAll() {\n    return this.http.get(this.URL).pipe(catchError(this.handleError));\n  }\n  getById(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  create(user) {\n    return this.http.post(this.URL, user).pipe(catchError(this.handleError));\n  }\n  update(id, user) {\n    const url = `${this.URL}/${id}`;\n    return this.http.put(url, user).pipe(catchError(this.handleError));\n  }\n  delete(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete(url).pipe(catchError(this.handleError));\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAOC,UAAU,QAAQ,MAAM;;;;AAO9D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB,EAAEC,MAAc;IAAhC,SAAI,GAAJD,IAAI;IAFxB,QAAG,GAAG,2BAA2B;EAEsB;EAEvDE,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,cAAc,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAC5DG,IAAI,CACHC,GAAG,CAAEC,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACA,KAAK,GAAGD,QAAQ,CAACC,KAAK;QAC3BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7C,IAAI,CAACT,MAAM,CAACY,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;;MAEpC,OAAOJ,QAAQ;IACjB,CAAC,CAAC,CACH;EACL;EAEAK,WAAW,CAACC,KAAwB;IAClC,MAAMC,OAAO,GAAGD,KAAK,CAACA,KAAK,CAACE,YAAY;IACxC,OAAOpB,UAAU,CAAC,MAAM,IAAIqB,KAAK,CAACF,OAAO,CAAC,CAAC;EAC7C;EAEAG,MAAM;IACJ,IAAI,CAACT,KAAK,GAAG,IAAI;IACjBC,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,MAAM;IACJ,OAAO,IAAI,CAACrB,IAAI,CACbsB,GAAG,CAAc,IAAI,CAACC,GAAG,CAAC,CAC1BhB,IAAI,CAACX,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAAC;EACvC;EAEAU,OAAO,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,GAAG,IAAIE,EAAE,EAAE;IAC/B,OAAO,IAAI,CAACzB,IAAI,CAACsB,GAAG,CAAYI,GAAG,CAAC,CAACnB,IAAI,CAACX,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAAC;EACzE;EAEAa,MAAM,CAACC,IAAe;IACpB,OAAO,IAAI,CAAC5B,IAAI,CACbK,IAAI,CAAY,IAAI,CAACkB,GAAG,EAAEK,IAAI,CAAC,CAC/BrB,IAAI,CAACX,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAAC;EACvC;EAEAe,MAAM,CAACJ,EAAU,EAAEG,IAAe;IAChC,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,GAAG,IAAIE,EAAE,EAAE;IAC/B,OAAO,IAAI,CAACzB,IAAI,CACb8B,GAAG,CAAYJ,GAAG,EAAEE,IAAI,CAAC,CACzBrB,IAAI,CAACX,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAAC;EACvC;EAEAiB,MAAM,CAACN,EAAU;IACf,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,GAAG,IAAIE,EAAE,EAAE;IAC/B,OAAO,IAAI,CAACzB,IAAI,CAAC+B,MAAM,CAAOL,GAAG,CAAC,CAACnB,IAAI,CAACX,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAAC;EACvE;EAEAkB,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACtB,KAAK;EACrB;;AA7DWZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAmC,SAAZnC,YAAY;EAAAoC,YAFX;AAAM","names":["catchError","throwError","UsersService","constructor","http","router","login","email","password","post","apiUrl","pipe","map","response","token","localStorage","setItem","navigate","handleError","error","message","errorMessage","Error","logout","removeItem","getAll","get","URL","getById","id","url","create","user","update","put","delete","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, catchError, tap, throwError } from \"rxjs\";\nimport { UserModel } from \"../models/user.model\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  URL = \"http://localhost:8080/api\";\n\n  constructor(private http: HttpClient, router: Router) {}\n\n  login(email: string, password: string) {\n    return this.http\n      .post<any>(`${this.apiUrl}/users/login`, { email, password })\n      .pipe(\n        map((response) => {\n          if (response && response.token) {\n            this.token = response.token;\n            localStorage.setItem(\"token\", response.token);\n            this.router.navigate([\"/profile\"]);\n          }\n          return response;\n        })\n      );\n  }\n\n  handleError(error: HttpErrorResponse) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n\n  getAll(): Observable<UserModel[]> {\n    return this.http\n      .get<UserModel[]>(this.URL)\n      .pipe(catchError(this.handleError));\n  }\n\n  getById(id: string): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http.get<UserModel>(url).pipe(catchError(this.handleError));\n  }\n\n  create(user: UserModel): Observable<UserModel> {\n    return this.http\n      .post<UserModel>(this.URL, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  update(id: string, user: UserModel): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http\n      .put<UserModel>(url, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  delete(id: string): Observable<void> {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete<void>(url).pipe(catchError(this.handleError));\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}