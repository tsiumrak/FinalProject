{"ast":null,"code":"import { BehaviorSubject, throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = \"http://localhost:8080/api\";\n    this.token = null;\n    this.userSubject = new BehaviorSubject(null);\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      console.log(response);\n      this.userSubject.next(response.user);\n      localStorage.setItem(\"token\", response.token);\n    }), catchError(error => {\n      console.log(error);\n      return throwError(error);\n    }));\n  }\n  handleError(error) {\n    const message = error.error.errorMessage;\n    return throwError(message);\n  }\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n  create(user) {\n    return this.http.post(`${this.apiUrl}/users`, user).pipe(catchError(this.handleError));\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,QAAQ,MAAM;AAC9D,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAOrD,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJ5C,WAAM,GAAG,2BAA2B;IACpC,UAAK,GAAkB,IAAI;IACnC,gBAAW,GAAG,IAAIP,eAAe,CAAmB,IAAI,CAAC;EAEM;EAE/DQ,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACtDG,IAAI,CACHV,GAAG,CAAEW,QAAQ,IAAI;MACfC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAI,CAACG,WAAW,CAACC,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAAC;MACpCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,QAAQ,CAACQ,KAAK,CAAC;IAC/C,CAAC,CAAC,EACFpB,UAAU,CAAEqB,KAAK,IAAI;MACnBR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;MAClB,OAAOtB,UAAU,CAACsB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEQC,WAAW,CAACD,KAAwB;IAC1C,MAAME,OAAO,GAAGF,KAAK,CAACA,KAAK,CAACG,YAAY;IACxC,OAAOzB,UAAU,CAACwB,OAAO,CAAC;EAC5B;EAEAE,MAAM;IACJ,IAAI,CAACL,KAAK,GAAG,IAAI;IACjBF,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,MAAM,CAACV,IAAe;IACpB,OAAO,IAAI,CAACb,IAAI,CACbK,IAAI,CAAY,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEO,IAAI,CAAC,CAC7CN,IAAI,CAACX,UAAU,CAAC,IAAI,CAACsB,WAAW,CAAC,CAAC;EACvC;EAEAM,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACR,KAAK;EACrB;;AAzCWlB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA2B,SAAZ3B,YAAY;EAAA4B,YAFX;AAAM","names":["BehaviorSubject","throwError","catchError","tap","UsersService","constructor","http","router","login","email","password","post","apiUrl","pipe","response","console","log","userSubject","next","user","localStorage","setItem","token","error","handleError","message","errorMessage","logout","removeItem","create","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable, throwError } from \"rxjs\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { UserModel } from \"../models/user.model\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  private apiUrl = \"http://localhost:8080/api\";\n  private token: string | null = null;\n  userSubject = new BehaviorSubject<UserModel | null>(null);\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(email: string, password: string): Observable<any> {\n    return this.http\n      .post<any>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        tap((response) => {\n          console.log(response);\n          this.userSubject.next(response.user);\n          localStorage.setItem(\"token\", response.token);\n        }),\n        catchError((error) => {\n          console.log(error);\n          return throwError(error);\n        })\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    const message = error.error.errorMessage;\n    return throwError(message);\n  }\n\n  logout() {\n    this.token = null;\n    localStorage.removeItem(\"token\");\n  }\n\n  create(user: UserModel): Observable<UserModel> {\n    return this.http\n      .post<UserModel>(`${this.apiUrl}/users`, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}