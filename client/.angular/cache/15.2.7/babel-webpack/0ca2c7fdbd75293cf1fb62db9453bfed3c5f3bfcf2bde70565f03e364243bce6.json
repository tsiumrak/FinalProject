{"ast":null,"code":"// import { Component, OnInit } from \"@angular/core\";\n// import { ActivatedRoute } from \"@angular/router\";\n// import { Post } from \"src/app/models/posts\";\n// import { PostsService } from \"src/app/services/posts.service\";\n// import { Location } from \"@angular/common\";\n// import { FormGroup, FormControl } from \"@angular/forms\";\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: \"app-editing-posts\",\n//   templateUrl: \"./editing-posts.component.html\",\n//   styleUrls: [\"./editing-posts.component.css\"],\n// })\n// export class EditingPostsComponent implements OnInit {\n//   post!: Post;\n//   selectedPostId: string | undefined;\n//   updatedPost = {\n//     name: \"\",\n//     title: \"\",\n//     text: \"\",\n//     photo: \"\",\n//   };\n//   registerForm: FormGroup = new FormGroup({}); // ініціалізуємо registerForm\n//   constructor(\n//     private postsService: PostsService,\n//     private route: ActivatedRoute,\n//     private location: Location\n//   ) {}\n//   ngOnInit(): void {\n//     this.registerForm = new FormGroup({\n//       name: new FormControl(),\n//       title: new FormControl(),\n//       text: new FormControl(),\n//       photo: new FormControl(),\n//     });\n//     this.route.paramMap.subscribe((params) => {\n//       let id = params.get(\"id\")!;\n//       this.selectedPostId = id;\n//       this.postsService.getOnePost(id).subscribe((post: Post) => {\n//         this.post = post;\n//       });\n//     });\n//   }\n//   onSubmit(): void {\n//     if (this.selectedPostId) {\n//       this.postsService\n//         .updateData(this.selectedPostId, this.updatedPost)\n//         .subscribe((post: Post) => {\n//           this.post = post;\n//         });\n//     }\n//   }\n//   back() {\n//     this.location.back();\n//   }\n// }\nimport { Component } from \"@angular/core\";\nimport { FormGroup, FormControl } from \"@angular/forms\";\nlet EditingPostsComponent = class EditingPostsComponent {\n  // constructor(\n  //   private postsService: PostsService,\n  //   private route: ActivatedRoute,\n  //   private location: Location\n  // ) {}\n  constructor(formBuilder, postsService) {\n    this.formBuilder = formBuilder;\n    this.postsService = postsService;\n    this.registerForm = this.formBuilder.group({\n      title: [\"\", Validators.required],\n      description: [\"\", Validators.required],\n      imageUrl: [\"\", Validators.required],\n      author: [\"\", Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.registerForm = new FormGroup({\n      name: new FormControl(),\n      title: new FormControl(),\n      text: new FormControl(),\n      photo: new FormControl()\n    });\n    this.route.paramMap.subscribe(params => {\n      let id = params.get(\"id\");\n      this.selectedPostId = id;\n      this.postsService.getOnePost(id).subscribe(post => {\n        this.post = post;\n        this.registerForm.patchValue({\n          name: this.post.name,\n          title: this.post.title,\n          text: this.post.text,\n          photo: this.post.photo\n        });\n      });\n    });\n  }\n  onSubmit() {\n    if (this.selectedPostId) {\n      const updatedPost = {\n        name: this.registerForm.value.name,\n        title: this.registerForm.value.title,\n        text: this.registerForm.value.text,\n        photo: this.registerForm.value.photo\n      };\n      this.postsService.updateData(this.selectedPostId, updatedPost).subscribe(post => {\n        this.post = post;\n      });\n    }\n  }\n  back() {\n    this.location.back();\n  }\n};\nEditingPostsComponent = __decorate([Component({\n  selector: \"app-editing-posts\",\n  templateUrl: \"./editing-posts.component.html\",\n  styleUrls: [\"./editing-posts.component.css\"]\n})], EditingPostsComponent);\nexport { EditingPostsComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","FormControl","EditingPostsComponent","constructor","formBuilder","postsService","registerForm","group","title","Validators","required","description","imageUrl","author","ngOnInit","name","text","photo","route","paramMap","subscribe","params","id","get","selectedPostId","getOnePost","post","patchValue","onSubmit","updatedPost","value","updateData","back","location","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/components/editing-posts/editing-posts.component.ts"],"sourcesContent":["// import { Component, OnInit } from \"@angular/core\";\n// import { ActivatedRoute } from \"@angular/router\";\n// import { Post } from \"src/app/models/posts\";\n// import { PostsService } from \"src/app/services/posts.service\";\n// import { Location } from \"@angular/common\";\n// import { FormGroup, FormControl } from \"@angular/forms\";\n\n// @Component({\n//   selector: \"app-editing-posts\",\n//   templateUrl: \"./editing-posts.component.html\",\n//   styleUrls: [\"./editing-posts.component.css\"],\n// })\n// export class EditingPostsComponent implements OnInit {\n//   post!: Post;\n//   selectedPostId: string | undefined;\n//   updatedPost = {\n//     name: \"\",\n//     title: \"\",\n//     text: \"\",\n//     photo: \"\",\n//   };\n//   registerForm: FormGroup = new FormGroup({}); // ініціалізуємо registerForm\n\n//   constructor(\n//     private postsService: PostsService,\n//     private route: ActivatedRoute,\n//     private location: Location\n//   ) {}\n\n//   ngOnInit(): void {\n//     this.registerForm = new FormGroup({\n//       name: new FormControl(),\n//       title: new FormControl(),\n//       text: new FormControl(),\n//       photo: new FormControl(),\n//     });\n\n//     this.route.paramMap.subscribe((params) => {\n//       let id = params.get(\"id\")!;\n//       this.selectedPostId = id;\n//       this.postsService.getOnePost(id).subscribe((post: Post) => {\n//         this.post = post;\n//       });\n//     });\n//   }\n\n//   onSubmit(): void {\n//     if (this.selectedPostId) {\n//       this.postsService\n//         .updateData(this.selectedPostId, this.updatedPost)\n//         .subscribe((post: Post) => {\n//           this.post = post;\n//         });\n//     }\n//   }\n\n//   back() {\n//     this.location.back();\n//   }\n// }\n\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Post } from \"src/app/models/posts\";\nimport { PostsService } from \"src/app/services/posts.service\";\nimport { Location } from \"@angular/common\";\nimport { FormGroup, FormControl } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-editing-posts\",\n  templateUrl: \"./editing-posts.component.html\",\n  styleUrls: [\"./editing-posts.component.css\"],\n})\nexport class EditingPostsComponent implements OnInit {\n  post!: Post;\n  selectedPostId: string | undefined;\n  registerForm: FormGroup;\n\n  // constructor(\n  //   private postsService: PostsService,\n  //   private route: ActivatedRoute,\n  //   private location: Location\n  // ) {}\n  constructor(\n    private formBuilder: FormBuilder,\n    private postsService: PostsService\n  ) {\n    this.registerForm = this.formBuilder.group({\n      title: [\"\", Validators.required],\n      description: [\"\", Validators.required],\n      imageUrl: [\"\", Validators.required],\n      author: [\"\", Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    this.registerForm = new FormGroup({\n      name: new FormControl(),\n      title: new FormControl(),\n      text: new FormControl(),\n      photo: new FormControl(),\n    });\n\n    this.route.paramMap.subscribe((params) => {\n      let id = params.get(\"id\")!;\n      this.selectedPostId = id;\n      this.postsService.getOnePost(id).subscribe((post: Post) => {\n        this.post = post;\n        this.registerForm.patchValue({\n          name: this.post.name,\n          title: this.post.title,\n          text: this.post.text,\n          photo: this.post.photo,\n        });\n      });\n    });\n  }\n\n  onSubmit(): void {\n    if (this.selectedPostId) {\n      const updatedPost = {\n        name: this.registerForm.value.name,\n        title: this.registerForm.value.title,\n        text: this.registerForm.value.text,\n        photo: this.registerForm.value.photo,\n      };\n      this.postsService\n        .updateData(this.selectedPostId, updatedPost)\n        .subscribe((post: Post) => {\n          this.post = post;\n        });\n    }\n  }\n\n  back() {\n    this.location.back();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}