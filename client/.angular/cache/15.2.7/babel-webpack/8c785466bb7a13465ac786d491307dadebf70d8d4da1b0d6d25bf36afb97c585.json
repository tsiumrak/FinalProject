{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.URL = \"http://localhost:8080/api\";\n  }\n  login(user) {\n    return this.http.post(`${this.URL}/login`, {\n      email: user.email,\n      password: user.password\n    }).pipe(tap(response => {\n      if (response && this.token) {\n        this.token = response.token;\n        this.router.navigate([\"/profile\"]); // перенаправлення на сторінку profile\n      }\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n  logout() {\n    this.token = null;\n  }\n  getAll() {\n    return this.http.get(this.URL).pipe(catchError(this.handleError));\n  }\n  getById(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  create(user) {\n    return this.http.post(this.URL, user).pipe(catchError(this.handleError));\n  }\n  update(id, user) {\n    const url = `${this.URL}/${id}`;\n    return this.http.put(url, user).pipe(catchError(this.handleError));\n  }\n  delete(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete(url).pipe(catchError(this.handleError));\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;;AAO9D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB,EAAEC,MAAc;IAAhC,SAAI,GAAJD,IAAI;IAFxB,QAAG,GAAG,2BAA2B;EAEsB;EAEvDE,KAAK,CAACC,IAAe;IACnB,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CAAC,GAAG,IAAI,CAACC,GAAG,QAAQ,EAAE;MAAEC,KAAK,EAAEH,IAAI,CAACG,KAAK;MAAEC,QAAQ,EAAEJ,IAAI,CAACI;IAAQ,CAAE,CAAC,CACzEC,IAAI,CACHZ,GAAG,CAAEa,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAI,IAAI,CAACC,KAAK,EAAE;QAC1B,IAAI,CAACA,KAAK,GAAGD,QAAQ,CAACC,KAAK;QAC3B,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;IAExC,CAAC,CAAC,EACFhB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CACV;EACxB;EAEAA,WAAW,CAACC,KAAwB;IAClC,MAAMC,OAAO,GAAGD,KAAK,CAACA,KAAK,CAACE,YAAY;IACxC,OAAOlB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAACF,OAAO,CAAC,CAAC;EAC7C;EAEAG,MAAM;IACJ,IAAI,CAACP,KAAK,GAAG,IAAI;EACnB;EAEAQ,MAAM;IACJ,OAAO,IAAI,CAAClB,IAAI,CACbmB,GAAG,CAAc,IAAI,CAACd,GAAG,CAAC,CAC1BG,IAAI,CAACb,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACvC;EAEAQ,OAAO,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACjB,GAAG,IAAIgB,EAAE,EAAE;IAC/B,OAAO,IAAI,CAACrB,IAAI,CAACmB,GAAG,CAAYG,GAAG,CAAC,CAACd,IAAI,CAACb,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACzE;EAEAW,MAAM,CAACpB,IAAe;IACpB,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CAAY,IAAI,CAACC,GAAG,EAAEF,IAAI,CAAC,CAC/BK,IAAI,CAACb,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACvC;EAEAY,MAAM,CAACH,EAAU,EAAElB,IAAe;IAChC,MAAMmB,GAAG,GAAG,GAAG,IAAI,CAACjB,GAAG,IAAIgB,EAAE,EAAE;IAC/B,OAAO,IAAI,CAACrB,IAAI,CACbyB,GAAG,CAAYH,GAAG,EAAEnB,IAAI,CAAC,CACzBK,IAAI,CAACb,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACvC;EAEAc,MAAM,CAACL,EAAU;IACf,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACjB,GAAG,IAAIgB,EAAE,EAAE;IAC/B,OAAO,IAAI,CAACrB,IAAI,CAAC0B,MAAM,CAAOJ,GAAG,CAAC,CAACd,IAAI,CAACb,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAAC;EACvE;EAEAe,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACjB,KAAK;EACrB;;AA3DWZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA8B,SAAZ9B,YAAY;EAAA+B,YAFX;AAAM","names":["catchError","tap","throwError","UsersService","constructor","http","router","login","user","post","URL","email","password","pipe","response","token","navigate","handleError","error","message","errorMessage","Error","logout","getAll","get","getById","id","url","create","update","put","delete","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, catchError, tap, throwError } from \"rxjs\";\nimport { UserModel } from \"../models/user.model\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  URL = \"http://localhost:8080/api\";\n\n  constructor(private http: HttpClient, router: Router) {}\n\n  login(user: UserModel): Observable<any> {\n    return this.http\n      .post(`${this.URL}/login`, { email: user.email, password: user.password })\n      .pipe(\n        tap((response) => {\n          if (response && this.token) {\n            this.token = response.token;\n            this.router.navigate([\"/profile\"]); // перенаправлення на сторінку profile\n          }\n        }),\n        catchError(this.handleError)\n      ) as Observable<any>;\n  }\n\n  handleError(error: HttpErrorResponse) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n\n  logout() {\n    this.token = null;\n  }\n\n  getAll(): Observable<UserModel[]> {\n    return this.http\n      .get<UserModel[]>(this.URL)\n      .pipe(catchError(this.handleError));\n  }\n\n  getById(id: string): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http.get<UserModel>(url).pipe(catchError(this.handleError));\n  }\n\n  create(user: UserModel): Observable<UserModel> {\n    return this.http\n      .post<UserModel>(this.URL, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  update(id: string, user: UserModel): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http\n      .put<UserModel>(url, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  delete(id: string): Observable<void> {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete<void>(url).pipe(catchError(this.handleError));\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n\n  //   get token(): string | null {\n  //     const expStr = localStorage.getItem(\"token-exp\");\n\n  //     if (expStr) {\n  //       const date = new Date(expStr);\n\n  //       if (date < new Date()) {\n  //         this.logout();\n  //         return null;\n  //       } else {\n  //         return localStorage.getItem(\"token\");\n  //       }\n  //     }\n\n  //     return null;\n  //   }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}