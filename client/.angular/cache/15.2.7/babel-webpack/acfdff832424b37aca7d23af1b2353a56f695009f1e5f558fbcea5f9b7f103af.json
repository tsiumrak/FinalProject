{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(http) {\n    this.http = http;\n    this.URL = \"http://localhost:8080/api\";\n  }\n  login(user) {\n    return this.http.post(`${this.URL}/login`, user).pipe(tap(this.setToken), catchError(this.handleError));\n  }\n  setToken(response) {\n    if (response) {\n      const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"token\", response.token);\n      localStorage.setItem(\"token-exp\", expiresDate.toString());\n    } else {\n      localStorage.clear();\n    }\n  }\n  handleError(error) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n  logout() {\n    this.setToken(null);\n  }\n  getAll() {\n    return this.http.get(this.URL).pipe(catchError(this.handleError));\n  }\n  getById(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  create(user) {\n    return this.http.post(this.URL, user).pipe(catchError(this.handleError));\n  }\n  update(id, user) {\n    const url = `${this.URL}/${id}`;\n    return this.http.put(url, user).pipe(catchError(this.handleError));\n  }\n  delete(id) {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete(url).pipe(catchError(this.handleError));\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  get token() {\n    const expStr = localStorage.getItem(\"token-exp\");\n    if (expStr) {\n      const date = new Date(expStr);\n      if (date < new Date()) {\n        this.logout();\n        return null;\n      }\n    } else {\n      return localStorage.getItem(\"token\");\n    }\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["catchError","tap","throwError","UsersService","constructor","http","login","user","post","URL","pipe","setToken","handleError","response","expiresDate","Date","getTime","localStorage","setItem","token","toString","clear","error","message","errorMessage","Error","logout","getAll","get","getById","id","url","create","update","put","delete","isAuthenticated","expStr","getItem","date","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, catchError, tap, throwError } from \"rxjs\";\nimport { UserModel } from \"../models/user.model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  URL = \"http://localhost:8080/api\";\n\n  constructor(private http: HttpClient) {}\n\n  login(user: UserModel): Observable<any> {\n    return this.http\n      .post(`${this.URL}/login`, user)\n      .pipe(\n        tap(this.setToken),\n        catchError(this.handleError)\n      ) as Observable<any>;\n  }\n\n  setToken(response: any) {\n    if (response) {\n      const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"token\", response.token);\n      localStorage.setItem(\"token-exp\", expiresDate.toString());\n    } else {\n      localStorage.clear();\n    }\n  }\n\n  handleError(error: HttpErrorResponse) {\n    const message = error.error.errorMessage;\n    return throwError(() => new Error(message));\n  }\n\n  logout() {\n    this.setToken(null);\n  }\n\n  getAll(): Observable<UserModel[]> {\n    return this.http\n      .get<UserModel[]>(this.URL)\n      .pipe(catchError(this.handleError));\n  }\n\n  getById(id: string): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http.get<UserModel>(url).pipe(catchError(this.handleError));\n  }\n\n  create(user: UserModel): Observable<UserModel> {\n    return this.http\n      .post<UserModel>(this.URL, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  update(id: string, user: UserModel): Observable<UserModel> {\n    const url = `${this.URL}/${id}`;\n    return this.http\n      .put<UserModel>(url, user)\n      .pipe(catchError(this.handleError));\n  }\n\n  delete(id: string): Observable<void> {\n    const url = `${this.URL}/${id}`;\n    return this.http.delete<void>(url).pipe(catchError(this.handleError));\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n  get token() {\n    const expStr = localStorage.getItem(\"token-exp\");\n    if (expStr) {\n      const date = new Date(expStr);\n      if (date < new Date()) {\n        this.logout();\n        return null;\n      }\n    } else {\n      return localStorage.getItem(\"token\");\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}