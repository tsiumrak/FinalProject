{"ast":null,"code":"// import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\n// import { Injectable } from \"@angular/core\";\n// import { Observable, throwError } from \"rxjs\";\n// import { catchError, map, tap } from \"rxjs/operators\";\n// import { UserModel } from \"../models/user.model\";\n// import { Router } from \"@angular/router\";\n// @Injectable({\n//   providedIn: \"root\",\n// })\n// export class UsersService {\n//   private apiUrl = \"http://localhost:8080/api\";\n//   private token: string | null = null;\n//   constructor(private http: HttpClient, private router: Router) {}\n//   login(email: string, password: string): Observable<any> {\n//     return this.http\n//       .post<any>(`${this.apiUrl}/login`, { email, password })\n//       .pipe(\n//         tap((this.setToken)  {\n//           if (response && response.token) {\n//             this.token = response.token;\n//             localStorage.setItem(\"token\", response.token);\n//             this.router.navigate([\"/admin-page/profile\"]);\n//           }\n//         }),\n//         catchError(this.handleError)\n//       ) as Observable<any>\n//   }\n//   setToken(response: any) {\n//     if(response) {\n//       const expiresDate = new Date(new Date().getTime() + 3600 * 1000)\n//       localStorage.setItem('token', response.token)\n//       localStorage.setItem('token-exp', expiresDate.toString())\n//     }\n//     else {\n//       localStorage.clear()\n//     }\n//    }\n//   private handleError(error: HttpErrorResponse) {\n//     const message = error.error.errorMessage;\n//     return throwError(message);\n//   }\n//   logout() {\n//     this.token = null;\n//     localStorage.removeItem(\"token\");\n//   }\n//   create(user: UserModel): Observable<UserModel> {\n//     return this.http\n//       .post<UserModel>(`${this.apiUrl}/users`, user)\n//       .pipe(catchError(this.handleError));\n//   }\n//   isAuthenticated(): boolean {\n//     return !!this.token;\n//   }\n// }\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = \"http://localhost:8080/api\";\n    this.token = null;\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(map(response => {\n      if (response && response.token) {\n        this.setToken(response);\n        this.router.navigate([\"/admin-page/profile\"]);\n      }\n      return response;\n    }), catchError(this.handleError));\n  }\n  setToken(response) {\n    if (response) {\n      const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n      this.token = response.token;\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('token-exp', expiresDate.toString());\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${response.token}`);\n      this.http.options({\n        headers\n      }).subscribe();\n    } else {\n      localStorage.clear();\n      this.token = null;\n    }\n  }\n  handleError(error) {\n    const message = error.error.errorMessage;\n    return throwError(message);\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,SAAwCA,WAAW,QAAQ,sBAAsB;AAEjF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAa,gBAAgB;;;;AAOrD,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAH5C,WAAM,GAAG,2BAA2B;IACpC,UAAK,GAAkB,IAAI;EAE4B;EAE/DC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACtDG,IAAI,CACHV,GAAG,CAAEW,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACC,QAAQ,CAACF,QAAQ,CAAC;QACvB,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;;MAE/C,OAAOH,QAAQ;IACjB,CAAC,CAAC,EACFZ,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CACV;EACxB;EAEAF,QAAQ,CAACF,QAAa;IACpB,IAAGA,QAAQ,EAAE;MACX,MAAMK,WAAW,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;MAChE,IAAI,CAACN,KAAK,GAAGD,QAAQ,CAACC,KAAK;MAC3BO,YAAY,CAACC,OAAO,CAAC,OAAO,EAAET,QAAQ,CAACC,KAAK,CAAC;MAC7CO,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEJ,WAAW,CAACK,QAAQ,EAAE,CAAC;MACzD,MAAMC,OAAO,GAAG,IAAIzB,WAAW,EAAE,CAAC0B,GAAG,CAAC,eAAe,EAAE,UAAUZ,QAAQ,CAACC,KAAK,EAAE,CAAC;MAClF,IAAI,CAACT,IAAI,CAACqB,OAAO,CAAM;QAACF;MAAO,CAAC,CAAC,CAACG,SAAS,EAAE;KAC9C,MAAM;MACLN,YAAY,CAACO,KAAK,EAAE;MACpB,IAAI,CAACd,KAAK,GAAG,IAAI;;EAErB;EAEQG,WAAW,CAACY,KAAwB;IAC1C,MAAMC,OAAO,GAAGD,KAAK,CAACA,KAAK,CAACE,YAAY;IACxC,OAAO/B,UAAU,CAAC8B,OAAO,CAAC;EAC5B;;AAtCW3B,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA6B,SAAZ7B,YAAY;EAAA8B,YAFX;AAAM","names":["HttpHeaders","throwError","catchError","map","UsersService","constructor","http","router","login","email","password","post","apiUrl","pipe","response","token","setToken","navigate","handleError","expiresDate","Date","getTime","localStorage","setItem","toString","headers","set","options","subscribe","clear","error","message","errorMessage","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/users.service.ts"],"sourcesContent":["// import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\n// import { Injectable } from \"@angular/core\";\n// import { Observable, throwError } from \"rxjs\";\n// import { catchError, map, tap } from \"rxjs/operators\";\n// import { UserModel } from \"../models/user.model\";\n// import { Router } from \"@angular/router\";\n\n// @Injectable({\n//   providedIn: \"root\",\n// })\n// export class UsersService {\n//   private apiUrl = \"http://localhost:8080/api\";\n//   private token: string | null = null;\n\n//   constructor(private http: HttpClient, private router: Router) {}\n\n//   login(email: string, password: string): Observable<any> {\n//     return this.http\n//       .post<any>(`${this.apiUrl}/login`, { email, password })\n//       .pipe(\n//         tap((this.setToken)  {\n//           if (response && response.token) {\n//             this.token = response.token;\n//             localStorage.setItem(\"token\", response.token);\n//             this.router.navigate([\"/admin-page/profile\"]);\n//           }\n          \n//         }),\n//         catchError(this.handleError)\n//       ) as Observable<any>\n//   }\n//   setToken(response: any) {\n//     if(response) {\n//       const expiresDate = new Date(new Date().getTime() + 3600 * 1000)\n//       localStorage.setItem('token', response.token)\n//       localStorage.setItem('token-exp', expiresDate.toString())\n//     }\n//     else {\n//       localStorage.clear()\n//     }\n//    }\n\n\n//   private handleError(error: HttpErrorResponse) {\n//     const message = error.error.errorMessage;\n//     return throwError(message);\n//   }\n\n//   logout() {\n//     this.token = null;\n//     localStorage.removeItem(\"token\");\n//   }\n\n//   create(user: UserModel): Observable<UserModel> {\n//     return this.http\n//       .post<UserModel>(`${this.apiUrl}/users`, user)\n//       .pipe(catchError(this.handleError));\n//   }\n\n//   isAuthenticated(): boolean {\n//     return !!this.token;\n//   }\n// }\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { UserModel } from \"../models/user.model\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UsersService {\n  private apiUrl = \"http://localhost:8080/api\";\n  private token: string | null = null;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(email: string, password: string): Observable<any> {\n    return this.http\n      .post<any>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        map((response) => {\n          if (response && response.token) {\n            this.setToken(response);\n            this.router.navigate([\"/admin-page/profile\"]);\n          }\n          return response;\n        }),\n        catchError(this.handleError)\n      ) as Observable<any>;\n  }\n\n  setToken(response: any) {\n    if(response) {\n      const expiresDate = new Date(new Date().getTime() + 3600 * 1000);\n      this.token = response.token;\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('token-exp', expiresDate.toString());\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${response.token}`);\n      this.http.options<any>({headers}).subscribe();\n    } else {\n      localStorage.clear();\n      this.token = null;\n    }\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    const message = error.error.errorMessage;\n    return throwError(message);\n  }\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}