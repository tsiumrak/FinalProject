{"ast":null,"code":"import _asyncToGenerator from \"/Users/igortsiumrak/Desktop/FinalProject/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class TranslationService {\n  constructor() {\n    this.supportedLanguages = [\"en\", \"uk\", \"fr\", \"es\"];\n    this.currentLang = new BehaviorSubject(\"en\");\n    this.currentLang$ = this.currentLang.asObservable();\n    this.translations = {};\n  }\n  getSupportedLanguages() {\n    return this.translationService.supportedLanguages;\n  }\n  loadTranslations(lang) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`/assets/i18n/${lang}.json`);\n      const translations = yield response.json();\n      return _this.translations = translations;\n    })();\n  }\n  getCurrentLang() {\n    return this.currentLang.value;\n  }\n  setLang(lang) {\n    this.currentLangSubject.next(lang);\n  }\n  translate(key) {\n    return this.translations[key] || key;\n  }\n}\nTranslationService.ɵfac = function TranslationService_Factory(t) {\n  return new (t || TranslationService)();\n};\nTranslationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TranslationService,\n  factory: TranslationService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,kBAAkB;EAU7BC;IATO,uBAAkB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAE7C,gBAAW,GAAG,IAAIF,eAAe,CAAS,IAAI,CAAC;IACtD,iBAAY,GAAG,IAAI,CAACG,WAAW,CAACC,YAAY,EAAE;IAEvC,iBAAY,GAAQ,EAAE;EAId;EACRC,qBAAqB;IAC1B,OAAO,IAAI,CAACC,kBAAkB,CAACC,kBAAkB;EACnD;EAEMC,gBAAgB,CAACC,IAAY;IAAA;IAAA;MACjC,MAAMC,QAAQ,SAASC,KAAK,CAAC,gBAAgBF,IAAI,OAAO,CAAC;MACzD,MAAMG,YAAY,SAASF,QAAQ,CAACG,IAAI,EAAE;MAC1C,OAAQ,KAAI,CAACD,YAAY,GAAGA,YAAY;IAAE;EAC5C;EAEAE,cAAc;IACZ,OAAO,IAAI,CAACX,WAAW,CAACY,KAAK;EAC/B;EAEAC,OAAO,CAACP,IAAY;IAClB,IAAI,CAACQ,kBAAkB,CAACC,IAAI,CAACT,IAAI,CAAC;EACpC;EAEAU,SAAS,CAACC,GAAW;IACnB,OAAO,IAAI,CAACR,YAAY,CAACQ,GAAG,CAAC,IAAIA,GAAG;EACtC;;AA/BWnB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAoB,SAAlBpB,kBAAkB;EAAAqB,YAFjB;AAAM","names":["BehaviorSubject","TranslationService","constructor","currentLang","asObservable","getSupportedLanguages","translationService","supportedLanguages","loadTranslations","lang","response","fetch","translations","json","getCurrentLang","value","setLang","currentLangSubject","next","translate","key","factory","providedIn"],"sourceRoot":"","sources":["/Users/igortsiumrak/Desktop/FinalProject/client/src/app/services/translation.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TranslationService {\n  public supportedLanguages = [\"en\", \"uk\", \"fr\", \"es\"];\n\n  public currentLang = new BehaviorSubject<string>(\"en\");\n  currentLang$ = this.currentLang.asObservable();\n\n  public translations: any = {};\n  currentLangSubject: any;\n  translationService: any;\n\n  constructor() {}\n  public getSupportedLanguages(): string[] {\n    return this.translationService.supportedLanguages;\n  }\n\n  async loadTranslations(lang: string): Promise<void> {\n    const response = await fetch(`/assets/i18n/${lang}.json`);\n    const translations = await response.json();\n    return (this.translations = translations);\n  }\n\n  getCurrentLang(): string {\n    return this.currentLang.value;\n  }\n\n  setLang(lang: string) {\n    this.currentLangSubject.next(lang);\n  }\n\n  translate(key: string): string {\n    return this.translations[key] || key;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}